<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Neuroimaging Cookbook</title><link>https://neuroimaging-cookbook.github.io/languages/python/</link><description>Recent content in python on Neuroimaging Cookbook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 14 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://neuroimaging-cookbook.github.io/languages/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Contributing to the Neuroimaging Cookbook</title><link>https://neuroimaging-cookbook.github.io/template_recipe/</link><pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/template_recipe/</guid><description>The title entered above will automatically appear here, so just start by explaining the recipe purpose of your recipe.
Here are some guidelines for writing your recipe:
Explain briefly how the recipe works. Provide a link to documentation of any third-party software when possible. Provide the version of the software/package. Use bullet points for your recipe's explanation. Try to explain everything briefly but clearly. If you provide a custom function, then please provide a usage example below.</description></item><item><title>Mask lower triangle of a Representational Dissimilarity Matrix (RDM)</title><link>https://neuroimaging-cookbook.github.io/recipes/flattenrdm_recipe/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/flattenrdm_recipe/</guid><description>This recipe takes a Representational Dissimilarity Matrix (RDM) as a square numpy array, masks the diagonal and lower triangle, and outputs a flattened numpy array of the upper triangle.
Easily adaptable for Representational Similarity Analysis (RSA), Functional/Structural Connectivity analyses, or other analyses with related pipelines with symmetric, square matrices.
Requirements:
numpy&amp;gt;=1.18.1 1 2 3 4 5 6 7 def flattenRDM(square_matrix): assert square_matrix.shape[0] == square_matrix.shape[1], &amp;#34;Must be a square numpy array&amp;#34; # mask the diagonal and lower triangle and output flattened array flattened_out = square_matrix[np.</description></item><item><title>Automatically Generated Recipe</title><link>https://neuroimaging-cookbook.github.io/recipes/automatically-generated-recipe/</link><pubDate>Fri, 11 Dec 2020 12:42:29 -0500</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/automatically-generated-recipe/</guid><description>Explain briefly what the recipe does. Explain briefly how the recipe works. Provide a citation and link to documentation of any third party software. Provide the version of the software/package Use bullet points for your recipe's explanation. Try to explain everything briefly but clearly. To format code, add it between a pair of 3 ticks (`)
1 2 3 def function_name(args): # code return 0 1 function_name(val) # result</description></item></channel></rss>