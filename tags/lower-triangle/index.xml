<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lower triangle on Neuroimaging Cookbook</title><link>https://neuroimaging-cookbook.github.io/tags/lower-triangle/</link><description>Recent content in lower triangle on Neuroimaging Cookbook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://neuroimaging-cookbook.github.io/tags/lower-triangle/index.xml" rel="self" type="application/rss+xml"/><item><title>Mask lower triangle of a Representational Dissimilarity Matrix (RDM)</title><link>https://neuroimaging-cookbook.github.io/recipes/flattenrdm_recipe/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/flattenrdm_recipe/</guid><description>This recipe takes a Representational Dissimilarity Matrix (RDM) as a square numpy array, masks the diagonal and lower triangle, and outputs a flattened numpy array of the upper triangle.
Easily adaptable for Representational Similarity Analysis (RSA), Functional/Structural Connectivity analyses, or other analyses with related pipelines with symmetric, square matrices.
Requirements:
numpy&amp;gt;=1.18.1 1 2 3 4 5 6 7 def flattenRDM(square_matrix): assert square_matrix.shape[0] == square_matrix.shape[1], &amp;#34;Must be a square numpy array&amp;#34; # mask the diagonal and lower triangle and output flattened array flattened_out = square_matrix[np.</description></item></channel></rss>