<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>roi on Neuroimaging Cookbook</title><link>https://neuroimaging-cookbook.github.io/tags/roi/</link><description>Recent content in roi on Neuroimaging Cookbook</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 14 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://neuroimaging-cookbook.github.io/tags/roi/index.xml" rel="self" type="application/rss+xml"/><item><title>Using 3dcalc to create a binary mask from a parcellation scheme</title><link>https://neuroimaging-cookbook.github.io/recipes/extractmaskfromparcellation_recipe/</link><pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/extractmaskfromparcellation_recipe/</guid><description>This recipe uses 3dcalc in AFNI to output a binarized 3D image file (nifti) of a region-of-interest in a parcellation scheme that is indexed by number of parcels.
Ingredients:
AFNI&amp;gt;=20.3.03 3dcalc Example usage: This example uses the Harvard Oxford Atlas
1 2 3 4 5 6 7 #!/bin/bash ATLAS_FILENAME=&amp;#39;Harvard_Oxford_Atlas.nii.gz&amp;#39; MASK_NAME=&amp;#39;r_amygdala&amp;#39; ROI_INDEX=102 # index assigned to parcel/region of interest in atlas parcellation scheme (the index for right amygdala in Harvard Oxford atlas is 102) 3dcalc -a ${ATLAS_FILENAME} -prefix ${MASK_NAME}.</description></item><item><title>Automatically Generated Recipe</title><link>https://neuroimaging-cookbook.github.io/recipes/automatically-generated-recipe/</link><pubDate>Fri, 11 Dec 2020 12:42:29 -0500</pubDate><guid>https://neuroimaging-cookbook.github.io/recipes/automatically-generated-recipe/</guid><description>Explain briefly what the recipe does. Explain briefly how the recipe works. Provide a citation and link to documentation of any third party software. Provide the version of the software/package Use bullet points for your recipe's explanation. Try to explain everything briefly but clearly. To format code, add it between a pair of 3 ticks (`)
1 2 3 def function_name(args): # code return 0 1 function_name(val) # result</description></item></channel></rss>